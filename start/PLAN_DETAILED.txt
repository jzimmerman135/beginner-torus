Order of operations:
--------------------

Implement brightness_to_ascii (10 minutes)
-- printf a variety of results
        int i = 0;
        while (b < levels[i] && i < N_LEVELS)
            i++;
        return colors[i];

Implement draw_scene and dummy coordinate to brightness (10 minutes)
-- use curses
        initscr();
        curs_set(0);
        move(h, w);
        addch(c);
        refresh();
        endwin();

-- draw a variety of brightnesses to the entire screen (10 minutes)
        #define MAX_WINDOW_W and MAX_WINDOW_H
        for ()
            for ()
                float x = (float)i / (float)w - 0.5;
                float y = (float)j / (float)h - 0.5;
                coordinate_to_brightness();
                move()
                addch()

-- draw a circle (10 minutes)
        length2f(xy) > r;

Implement main timer loop (10 minutes)
-- make the circle change size
        clock_t time_start = clock()
        float time_elapsed = 0.0;
        frames = 0;
        do {
            time_elapsed = (float)(clock() - time_start) / CLOCKS_PER_SEC;
            draw_scene
            refresh()
            frames++;
        } while (time_elapsed < MAX_TIME)
        endwin();
        printf("Framerate %.0f fps\n", frames / time_elapsed);

Explain raymarching algorithm (10 minutes)
-- what is seeing? what is light?
-- ray origin
-- ray direction
-- distance estimator
-- normals
-- light direction

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
                            BREAK
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

Implement Distance Estimator (10 minutes)
-- explain signed distance field
-- basically give function
-- add time as a parameter!!!

Implement Raymarching loop (15 minutes)
-- draw sphere distance field

    float d_origin
    for (i < MAX_STEPS)
        p = ro + rd * d;
        ds = get_dist(p);
        d += ds;
        if (d > MAX_DIST)
            return d
        if (abs(ds) < SURF_DIST)
            return d
    return d


Implement get_normal (5 minutes)
    float d = get_distance(cp, t);
    /* using calculus approximation */
    float e = 0.01;
    float3 n = {
        d - get_distance(vec3(cp.x - e, cp.y, cp.z), t),
        d - get_distance(vec3(cp.x, cp.y - e, cp.z), t),
        d - get_distance(vec3(cp.x, cp.y, cp.z - e), t)
    };
    return normalize3(n);

Implement get_light (10 minutes)
    -- first with no reflected brightness from ground

    draw a sphere
    float3 ld = {lo.x - cp.x, lo.y - cp.y, lo.z - cp.z};
    ld = normalize3(ld);
    /* get normal of surface */ 
    float3 cn = get_normal(cp, t); 
    
    /* use to simulate reflections from floor */
    float down_angle = -cn.y * .5 + .5; 
    float reflected_brightness = fmax(down_angle * 0.4, 0.02); 


    /* measure closeness between surface normal and light source */
    float dif = clamp(dot3(ld, cn), reflected_brightness, 1.0);
    return dif;

Add movement! (30 minutes)
    -- explain how we can trick the distance estimator
    -- bust out the desmos tanh and sin/cos
    -- move the shapes
    -- move the light source
    -- rotateX